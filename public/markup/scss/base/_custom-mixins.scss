// custom flex helpers
// use as class or extend inside a class.
//
.flex {
  display: flex;
  flex-wrap: wrap;
  width: 100%;

  &-top {
    @extend .flex;
    align-items: flex-start;
  }

  &-middle {
    @extend .flex;
    align-items: center;
  }

  &-bottom {
    @extend .flex;
    align-items: flex-end;
  }

  &-justify {
    @extend .flex;
    justify-content: space-between;
  }

  &-center {
    @extend .flex;
    justify-content: center;
  }

  &-end {
    @extend .flex;
    justify-content: flex-end;
  }
}


// vertical align x
// usage: @include vertical-align-x;
//
@mixin vertical-align-x {
  position: absolute;
  left: 50%;
  transform: translate(-50%, 0);
}


// vertical align y
// usage: @include vertical-align-y;
//
@mixin vertical-align-y {
  position: absolute;
  top: 50%;
  transform: translate(0, -50%);
}


// vertical align x and y
// usage: @include vertical-align-x and y;
//
@mixin vertical-align-xy {
  position: absolute;
  left: 50%;
  top: 50%;
  transform: translate(-50%, -50%);
}


// inline-block mixin shortcut
// usage @include dib(top);
//
@mixin dib($var: top) {
  display: inline-block;
  vertical-align: $var;
}


// truncate the text
// usage @include truncate;
//
@mixin truncate {
  max-width: 100%;
  white-space: nowrap;
  text-overflow: ellipsis;
  overflow: hidden;
}


// retina image
@mixin retina($image, $extension, $width, $height) {
  background: url('../images/' + $image + '.' + $extension) no-repeat;
  width: $width;
  height: $height;

  @media (min--moz-device-pixel-ratio: 1.3),
  (-o-min-device-pixel-ratio: 2.6/2),
  (-webkit-min-device-pixel-ratio: 1.3),
  (min-device-pixel-ratio: 1.3),
  (min-resolution: 1.3dppx) {
    background-image: url('../images/' + $image + '@2x' + '.' + $extension);
    background-size: $width $height;
  }
}
// @include retina(sprite, png, 500px, 350px);


// @font-face code generator
@mixin font-face($font, $url, $weight: normal, $style: normal){
  @font-face {
    font-family: $font;
    src:url('#{$url}.eot');
    src:url('#{$url}.eot?#iefix') format('embedded-opentype'),
    url('#{$url}.svg') format('svg'),
    url('#{$url}.ttf') format('truetype'),
    url('#{$url}.woff') format('woff'),
    url('#{$url}.woff2') format('woff2');
    font-weight: $weight;
    font-style: $style;
  }
}
// *** demo ***
// @include font-face("font-name", ("../fonts/font-file-name"), normal, normal );


// set font
@mixin font($font-size, $line-height, $font-weight: null, $font-style: null, $family: "") {
  @if ($family != "") {
    font: $font-style $font-weight #{$font-size}/#{$line-height} $family;
  } @else {
    font-size: $font-size;
    line-height: $line-height;
    font-weight: $font-weight;
    font-style: $font-style;
  }
}


// table-layout creation
@mixin table-layout($align: middle) {
  display: table;
  width: 100%;
  table-layout: fixed;

  > * {
    display: table-cell;
    vertical-align: $align;
  }
}


// display: inline-block; extra space removing
// usage: @include dib-reset;
// @include dib-reset(middle);
@mixin dib-reset($align:top) {
  letter-spacing: -5px;
  > * {
    display: inline-block;
    vertical-align: $align;
    letter-spacing: 0;
  }
}


/// Directional-property mixins are shorthands for writing properties like the following
///
/// @ignore You can also use `false` instead of `null`.
///
/// @param {List} $vals
///   List of directional values
///
/// @example scss - Usage
///   .element {
///     @include border-style(dotted null);
///     @include margin(null 0 10px);
///   }
///
/// @example css - CSS Output
///   .element {
///     border-bottom-style: dotted;
///     border-top-style: dotted;
///     margin-bottom: 10px;
///     margin-left: 0;
///     margin-right: 0;
///   }
///
/// @require {function} contains-falsy
///
/// @return {List}

@function collapse-directionals($vals) {
  $output: null;

  $a: nth($vals, 1);
  $b: if(length($vals) < 2, $a, nth($vals, 2));
  $c: if(length($vals) < 3, $a, nth($vals, 3));
  $d: if(length($vals) < 2, $a, nth($vals, if(length($vals) < 4, 2, 4)));

  @if $a == 0 { $a: 0; }
  @if $b == 0 { $b: 0; }
  @if $c == 0 { $c: 0; }
  @if $d == 0 { $d: 0; }

  @if $a == $b and $a == $c and $a == $d { $output: $a;          }
  @else if $a == $c and $b == $d         { $output: $a $b;       }
  @else if $b == $d                      { $output: $a $b $c;    }
  @else                                  { $output: $a $b $c $d; }

  @return $output;
}

/// Output directional properties, for instance `margin`.
///
/// @access private
///
/// @param {String} $pre
///   Prefix to use
/// @param {String} $suf
///   Suffix to use
/// @param {List} $vals
///   List of values
///
/// @require {function} collapse-directionals
/// @require {function} contains-falsy

@mixin directional-property($pre, $suf, $vals) {
  // Property Names
  $top:    $pre + "-top"    + if($suf, "-#{$suf}", "");
  $bottom: $pre + "-bottom" + if($suf, "-#{$suf}", "");
  $left:   $pre + "-left"   + if($suf, "-#{$suf}", "");
  $right:  $pre + "-right"  + if($suf, "-#{$suf}", "");
  $all:    $pre +             if($suf, "-#{$suf}", "");

  $vals: collapse-directionals($vals);

  @if contains-falsy($vals) {
    @if nth($vals, 1) { #{$top}: nth($vals, 1); }

    @if length($vals) == 1 {
      @if nth($vals, 1) { #{$right}: nth($vals, 1); }
    } @else {
      @if nth($vals, 2) { #{$right}: nth($vals, 2); }
    }

    @if length($vals) == 2 {
      @if nth($vals, 1) { #{$bottom}: nth($vals, 1); }
      @if nth($vals, 2) { #{$left}:   nth($vals, 2); }
    } @else if length($vals) == 3 {
      @if nth($vals, 3) { #{$bottom}: nth($vals, 3); }
      @if nth($vals, 2) { #{$left}:   nth($vals, 2); }
    } @else if length($vals) == 4 {
      @if nth($vals, 3) { #{$bottom}: nth($vals, 3); }
      @if nth($vals, 4) { #{$left}:   nth($vals, 4); }
    }
  } @else {
    #{$all}: $vals;
  }
}

/// Provides a quick method for targeting `padding` on specific sides of a box. Use a `null` value to “skip” a side.
///
/// @param {Arglist} $vals
///   List of arguments
///
/// @example scss - Usage
///   .element {
///     @include padding(12vh null 10px 5%);
///   }
///
/// @example css - CSS Output
///   .element {
///     padding-bottom: 10px;
///     padding-left: 5%;
///     padding-top: 12vh;
///   }
///
/// @require {mixin} directional-property
///
/// @output `padding`


@mixin padding($vals...) {
  @include directional-property(padding, false, $vals...);
}

/// Provides a quick method for targeting `margin` on specific sides of a box. Use a `null` value to “skip” a side.
///
/// @param {Arglist} $vals
///   List of arguments
///
/// @example scss - Usage
///   .element {
///     @include margin(null 10px 3em 20vh);
///   }
///
/// @example css - CSS Output
///   .element {
///     margin-bottom: 3em;
///     margin-left: 20vh;
///     margin-right: 10px;
///   }
///
/// @require {mixin} directional-property
///
/// @output `margin`

@mixin margin($vals...) {
  @include directional-property(margin, false, $vals...);
}


// Manually initialize icomoon (e.g. in a :before block)
// @include icomoon("\e900");
@mixin icomoon($char) {
  content: $char;
  font-family: 'icomoon' !important;
  speak: none;
  font-style: normal;
  font-weight: normal;
  font-variant: normal;
  text-transform: none;
  line-height: 1;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}
